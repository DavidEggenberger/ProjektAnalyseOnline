@page "/CreateProjectAnalysis/{ProjectName}"
@using Client.Misc;
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="max-w-[1400px] ml-auto mr-auto w-full h-full">
    <div class="h-[65px] w-full flex flex-row gap-x-[20px] mb-[5px]">
        <div class="flex flex-col flex-1 cursor-pointer">
            <div class="h-[5px] w-full @(currentStep == CreationProcessStep.Principles ? "bg-green-600" : "bg-green-300")  mb-[10px]"></div>
            <h3 class="text-strawberry">Schritt 1:</h3>
            <h3 class="mt-[-3px]">Handlungsgrundsätze</h3>
        </div>
        <div class="flex flex-col flex-1 cursor-pointer">
            <div class="h-[5px] w-full @(currentStep == CreationProcessStep.Economy ? "bg-green-600" : "bg-green-300") mb-[10px]"></div>
            <h3 class="text-strawberry">Schritt 2:</h3>
            <h3 class="mt-[-3px]">Analyse Wirtschaft</h3>
        </div>
        <div class="flex flex-col flex-1 cursor-pointer">
            <div class="h-[5px] w-full @(currentStep == CreationProcessStep.Environment ? "bg-green-600" : "bg-green-300") mb-[10px]"></div>
            <h3 class="text-strawberry">Schritt 3:</h3>
            <h3 class="mt-[-3px]">Analyse Umwelt</h3>
        </div>
        <div class="flex flex-col flex-1 cursor-pointer">
            <div class="h-[5px] w-full @(currentStep == CreationProcessStep.Society ? "bg-green-600" : "bg-green-300") mb-[10px]"></div>
            <h3 class="text-strawberry">Schritt 4:</h3>
            <h3 class="mt-[-3px]">Analyse Gesellschaft</h3>
        </div>
        <div class="flex flex-col flex-1 cursor-pointer">
            <div class="h-[5px] w-full @(currentStep == CreationProcessStep.Summary ? "bg-green-600" : "bg-green-300") mb-[10px]"></div>
            <h3 class="text-strawberry">Schritt 5:</h3>
            <h3 class="mt-[-3px]">Kurzbericht</h3>
        </div>
    </div>
    <StepOverviewComponent CreateProjectAnalysisCallback="CreateProjectAnalysisMethod" Step="currentStep" StartStepFinished="FinishStartingStep" ClickedCount="clickedCount" QuestionDomainStepFinished="domain => DomainChangedCallback(domain)" />
    <div class="h-[calc(100%-145px)] overflow-y-auto">
        @if(currentStep == CreationProcessStep.Principles)
        {
            <AnalysisPrinciplesComponent clickedChange="i => ClickedCallback(i)" analysisPrincipleDTOs="analysisPrincipleDTOs" />
        }
        @if(currentStep == CreationProcessStep.Economy)
        {
            <AnalysisComponent Step="currentStep" ProjectAnalysis="projectAnalysis" Questions="questions"/>
        }
        @if (currentStep == CreationProcessStep.Environment)
        {
            <AnalysisComponent Step="currentStep" ProjectAnalysis="projectAnalysis" Questions="questions" />
        }
        @if (currentStep == CreationProcessStep.Society)
        {
            <AnalysisComponent Step="currentStep" ProjectAnalysis="projectAnalysis" Questions="questions" />
        }
        @if (currentStep == CreationProcessStep.Summary)
        {
            <div class="flex flex-col gap-y-[15px]">
                <h3 class="text-4xl text-bold mt-[20px] mb-[5px]">Übersicht über deine Projektanalyse: @projectAnalysis.ProjectName</h3>
                <div>
                    <h4 class="text-3xl text-bold">Gesamtauswirkung:</h4>
                    <ResultProgessComponent AnswerChoice="projectAnalysis.Overall" />
                </div>
                <div>
                    <h4 class="text-3xl text-bold">Wirtschaftliche Auswirkungen📈:</h4>
                    <ResultProgessComponent AnswerChoice="projectAnalysis.Economic" />
                </div>
                <div>
                    <h4 class="text-3xl text-bold">Gesellschaftliche Auswirkungen🌳:</h4>
                    <ResultProgessComponent AnswerChoice="projectAnalysis.Society"/>
                </div>
                <div>
                    <h4 class="text-3xl text-bold">Umwelt Auswirkungen👩‍👨‍👦‍👧:</h4>
                    <ResultProgessComponent AnswerChoice="projectAnalysis.Nature"/>
                </div>
            </div>
        }
    </div>
</div>



@code {
    private int clickedCount = 0;
    private CreationProcessStep currentStep;

    [Parameter]
    public string ProjectName { get; set; }

    private ProjectAnalysisDTO projectAnalysis;
    private List<AnalysisPrinciplesDTO> analysisPrincipleDTOs;
    private List<QuestionDTO> questions;

    protected override async Task OnInitializedAsync()
    {
        currentStep = CreationProcessStep.Principles;
        projectAnalysis = await httpClient.GetFromJsonAsync<ProjectAnalysisDTO>("api/ProjectAnalysis/new");
        projectAnalysis.ProjectName = ProjectName;
        analysisPrincipleDTOs = await httpClient.GetFromJsonAsync<List<AnalysisPrinciplesDTO>>("api/ProjectAnalysisDefinitions/analysisPrinciples");
        questions = await httpClient.GetFromJsonAsync<List<QuestionDTO>>("api/ProjectAnalysisDefinitions/analysisQuestions");
    } 

    private void FinishStartingStep()
    {
        currentStep = CreationProcessStep.Economy;
        clickedCount = 0;
    }

    private void ClickedCallback(bool b)
    {
        if (b)
        {
            clickedCount++;
        }
        else
        {
            clickedCount--;
        }
    }

    private void DomainChangedCallback(CreationProcessStep step)
    {
        if (step == CreationProcessStep.Economy)
        {
            currentStep = CreationProcessStep.Environment;
        }
        if (step == CreationProcessStep.Environment)
        {
            currentStep = CreationProcessStep.Society;
        }
        if (step == CreationProcessStep.Society)
        {
            currentStep = CreationProcessStep.Summary;
        }

        StateHasChanged();
    }

    private async Task CreateProjectAnalysisMethod()
    {
        await httpClient.PostAsJsonAsync("api/projectanalysis", projectAnalysis);
        navigationManager.NavigateTo("/", true);
    }
}