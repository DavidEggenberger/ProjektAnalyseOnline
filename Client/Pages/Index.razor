@page "/"
@using Blazored.Modal.Services
@using Blazored.Modal
@inject NavigationManager navigationManager
@inject HttpClient httpClient

<div class="max-w-[1400px] ml-auto mr-auto w-full h-full">
    <div class="grid h-[45%] max-h-[750px] justify-center justify-items-center content-center">
        <div class="w-[70%] flex flex-col">
            <h1 class="text-5xl leading-[3.25rem]">Analysiere dein Projekt und sehe die Auswirkungen auf Wirtschaft📈, Umwelt🌳 und Gesellschaft👩‍👨‍👦‍👧</h1>
            <h3 class="text-2xl mt-2">Oder suche nach existierenden Projektanalysen</h3>
            <div class="flex flex-row mt-3">
                <button 
                    @onclick='async () => await StartProjectAnalysis()' 
                    class="p-[6px] px-[10px] text-2xl rounded-md cursor-pointer bg-green-500 hover:bg-green-600 text-white">
                    Projektanalyse erstellen
                </button>
            </div>
        </div>
    </div>
    <div class="h-[55%]">
        <div class="bg-green-200 h-[calc(100%)] rounded-lg">
            <div class="h-[60px] flex flex-row gap-x-[15px] pl-[25px] pt-[5px]">
                <div class="flex flex-col">
                    <label class="font-medium text-sm">Name, Stichwort etc</label>
                    <input autocomplete="off" @bind="SearchTerm" @bind:event="oninput"
                           autocorrect="off"
                           spellcheck="false"
                           class="rounded-md capitalize text-sm h-[30px]"
                           type="text" />
                </div>
                <div class="flex flex-col">
                    <label class="text-sm">Auswirkungen</label>
                    <select class="h-[30px] rounded-md">
                        <option></option>
                    </select>
                </div>
                <button @onclick="() => { SearchTerm = string.Empty; StateHasChanged();  }" class="h-[30px] mt-auto p-1 bg-green-300 cursor-pointer rounded-md mb-[5px]">
                    <span class="text-sm">Filter zurücksetzen</span>
                </button>

            </div>
            <div class="h-[calc(100%-60px)] overflow-y-auto flex flex-row flex-wrap justify-stretch gap-x-[25px] gap-y-[12.5px] pt-[8px] pb-[20px] pl-[25px]">
                @if (projectAnalyses != null)
                {
                    foreach (var projectAnalysis in projectAnalyses)
                    {
                        <DisplayProjectAnalysisCard ProjectAnalysis="projectAnalysis" />
                    }
                }
            </div>
        </div>
    </div>
</div>


@code{
    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set 
        { 
            searchTerm = value;
            if (searchTerm == string.Empty)
            {
                ResetFilter();
            }
            else
            {
                SearchAnalyses();
            }
        }
    }



    [CascadingParameter]
    public IModalService ModalService { get; set; }

    private IModalReference modalReference;

    private List<ProjectAnalysisDTO> projectAnalyses;
    private List<ProjectAnalysisDTO> backupAnalyses;

    protected override async Task OnInitializedAsync()
    {
        backupAnalyses = projectAnalyses = await httpClient.GetFromJsonAsync<List<ProjectAnalysisDTO>>("api/ProjectAnalysis/all");
    }

    private void ResetFilter()
    {
        projectAnalyses = backupAnalyses;
        StateHasChanged();
    }

    private async Task SearchAnalyses()
    {
        projectAnalyses = await httpClient.GetFromJsonAsync<List<ProjectAnalysisDTO>>($"api/ProjectAnalysisSearch?keyword={SearchTerm}");
    }

    private async Task StartProjectAnalysis()
    {
        var modalOptions = new ModalOptions
            {
                HideCloseButton = true,
                Position = ModalPosition.Middle
            };

        var parameters = new ModalParameters
        {
            { nameof(StartProjectAnalysisModal.ModalReference), modalReference },
            { nameof(StartProjectAnalysisModal.CloseModalCallback), (Action)(() => { modalReference.Close(); }) }
        };

        modalReference = ModalService.Show<StartProjectAnalysisModal>(string.Empty, parameters, modalOptions);
    }
}