@using Blazored.Modal.Services
@using Blazored.Modal

<div class="h-[50px]">

</div>
<div class="h-[650px] flex flex-row gap-x-[25px] text-start">
    <div class="bg-green-200 w-[175px] p-1">
        <h2 class="font-bold h-[48px] mb-2 mx-2">Stark negative Auswirkungen</h2>
        <Reorder Items="questionsStrongNegative" OnStart="(args) => choiceDTO = AnswerChoiceDTO.starkNegativ" OnFinish="args => FinishedCallback(args, AnswerChoiceDTO.starkNegativ)" TItem="AnswerDTO">
            @if (context.Question != null)
            {
                <div class="mb-2 px-2 w-full h-full flex flex-col bg-green-300">
                    <div class="mb-[5px]">
                        <h5 class="font-semibold">@context.Question.Keyword</h5>
                    </div>
                    <div class="flex flex-row justify-between">
                        <div>
                            <span class="text-xs">@context.Question.Date.ToShortDateString()</span>
                        </div>
                        <button @onclick="() => ModalService.Show<MoveReasonModal>()">asdf</button>
                    </div>
                </div>
            }
            else
            {
                <div class="h-[20px]">
                    
                </div>
            }
        </Reorder>
    </div>
    <div class="bg-green-200 w-[175px] p-1">
        <h2 class="font-bold h-[48px] mb-2 mx-2">Stark negative Auswirkungen</h2>
        <Reorder Items="questionsStrongNegative" OnStart="(args) => choiceDTO = AnswerChoiceDTO.negativ" OnFinish="args => FinishedCallback(args, AnswerChoiceDTO.negativ)" TItem="AnswerDTO">
            @if (context.Question != null)
            {
                <div class="mb-2 px-2 w-full h-full flex flex-col bg-green-300">
                    <div class="mb-[5px]">
                        <h5 class="font-semibold">@context.Question.Keyword</h5>
                    </div>
                    <div class="flex flex-row justify-between">
                        <div>
                            <span class="text-xs">@context.Question.Date.ToShortDateString()</span>
                        </div>
                        <button @onclick="() => ModalService.Show<MoveReasonModal>()">asdf</button>
                    </div>
                </div>
            }
            else
            {
                <div class="h-[20px]">
                </div>
            }
        </Reorder>
    </div>
    <div class="bg-green-300 p-1 w-[175px]">
        <h2>Neutrale Auswirkungen</h2>
        <Reorder Items="questionsNeutral" TItem="AnswerDTO" OnFinish="args => FinishedCallback(args, AnswerChoiceDTO.neutral)">
            @if (context.Question != null)
            {
                <div class="mb-2 mx-2">
                    <h5>@context.Question.Keyword</h5>

                </div>
            }
            else
            {
                <div class="h-[20px]">

                </div>
            }
        </Reorder>
    </div>
    <div class="bg-green-300 p-1 w-[175px]">
        <h2>Positive Auswirkungen</h2>
        <Reorder Items="questionsPositive" TItem="AnswerDTO" OnFinish="args => FinishedCallback(args, AnswerChoiceDTO.positiv)">
            @if (context.Question != null)
            {
                <div class="mb-2 mx-2">
                    <h5>@context.Question.Keyword</h5>

                </div>
            }
            else
            {
                <div class="h-[20px]">

                </div>
            }
        </Reorder>
    </div>
    <div class="bg-green-300 p-1 w-[175px]">
        <h2>Sehr positive Auswirkungen</h2>
        <Reorder Items="questionsStrongPositive" TItem="AnswerDTO" OnFinish="args => FinishedCallback(args, AnswerChoiceDTO.starkPositiv)">
            @if (context.Question != null)
            {
                <div class="mb-2 mx-2">
                    <h5>@context.Question.Keyword</h5>

                </div>
            }
            else
            {
                <div class="h-[20px]">

                </div>
            }
        </Reorder>
    </div>
</div>



@code {
    private AnswerChoiceDTO choiceDTO;

    [Parameter]
    public ProjectAnalysisDTO ProjectAnalysis { get; set; }

    [Parameter]
    public Action CloseModalCallback { get; set; }

    [CascadingParameter]
    public IModalService ModalService { get; set; }

    private IModalReference ModalReference;

    private string text = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        questionsStrongNegative.AddRange(ProjectAnalysis.Answers
            .Where(a => a.Choice == AnswerChoiceDTO.starkNegativ)
            .ToList());

        questionsNegative.AddRange(ProjectAnalysis.Answers
            .Where(a => a.Choice == AnswerChoiceDTO.negativ || a.Choice == AnswerChoiceDTO.tendenziellNegativ)
            .ToList());

        questionsNeutral.AddRange(ProjectAnalysis.Answers
            .Where(a => a.Choice == AnswerChoiceDTO.neutral)
            .ToList());

        questionsPositive.AddRange(ProjectAnalysis.Answers
            .Where(a => a.Choice == AnswerChoiceDTO.positiv || a.Choice == AnswerChoiceDTO.tendenziellPositiv)
            .ToList());

        questionsStrongPositive.AddRange(ProjectAnalysis.Answers
           .Where(a => a.Choice == AnswerChoiceDTO.starkPositiv)
           .ToList());
    }

    private void FinishedCallback(AnswerDTO answer, AnswerChoiceDTO choice)
    {
        var modalOptions = new ModalOptions
            {
                HideCloseButton = true,
                Position = ModalPosition.Middle
            };

        var parameters = new ModalParameters
        {
            { nameof(MoveReasonModal.Text), $"Du verschiebst {answer.Question.Keyword} von {choiceDTO} zu {choice}"  },
            { nameof(MoveReasonModal.CloseModalCallback), (Action)(() => { ModalReference.Close(); }) }
        };

        ModalReference = ModalService.Show<MoveReasonModal>(string.Empty, parameters, modalOptions);

        StateHasChanged();
    }

    public List<AnswerDTO> questionsStrongNegative = new List<AnswerDTO>() { new AnswerDTO() };
    public List<AnswerDTO> questionsNegative = new List<AnswerDTO>() { new AnswerDTO() };
    public List<AnswerDTO> questionsNeutral = new List<AnswerDTO>() { new AnswerDTO() };
    public List<AnswerDTO> questionsPositive = new List<AnswerDTO>() { new AnswerDTO() };
    public List<AnswerDTO> questionsStrongPositive = new List<AnswerDTO>() { new AnswerDTO() };



}
